buildscript {
	ext {
		kotlinVersion = '1.4.20'
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}



plugins {
  id 'com.google.cloud.tools.jib' version '3.1.4'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	testCompile('org.springframework.boot:spring-boot-starter-test')
}


/**
 * This task copies content of properties file mentioned in command and saves it to application.properties in src directory as well as in build directory.
 */
static def envq() {
  String env = System.getProperty("mymessage")
  return env
}

jib {
 
  //String env = System.getProperty("mymessage")

 from {
    image = 'openjdk:alpine'
    }
 to {
    image = '987429592769.dkr.ecr.ap-south-1.amazonaws.com/mydockerrepo:'.envq()
    //tags = [env]
    credHelper = 'ecr-login'
  }

  container {
    jvmFlags = ['-Penvironment=dev', '-Xms512m', '-Xdebug']
    mainClass = 'mypackage.MyApp'
    //args = [env]
    //ports = ['1000', '2000-2003/udp']
    labels = [key2:'value2']
    //format = 'OCI'
  }
}

